WidgetsExample:

<WidgetsExample@GridLayout>:
    cols: 3
    Button:
        text: "Click here"
        on_press: root.on_button_click()
    Label:
        text: root.my_text
        # For the font we download a font which is stored in the fonts directory within this project folder
        # Then for the attribute of font_name we set the path of where that font is located
        font_name: "fonts/Lcd.ttf"
        font_size: "80dp"


<PageLayoutExample@PageLayout>:
    MainWidget:
    BoxLayoutExample:
    AnchorLayoutExample:
    GridLayoutExample:


<ScrollViewExample@ScrollView>:
    StackLayoutExample:
        size_hint: 1,None
        # this value of self.minimum_height gets computed automatically from StackLayoutExample
        height: self.minimum_height 


# stack layout will stack items on multiple lines
# each item must get a size
<StackLayoutExample>:
    # options: left-right top-bottom , default: "lr-tb"
    # orientation: "rl-bt"
    # padding values are in a clockwise rotation starting from the left
    # left, top, right, bottom
    # padding: ("20dp","20dp","20dp","300dp") 
    # spacing is given horizontaly and vertically -> <horizontal_value>, <vertical_value>
    # spacing: "20dp", "20dp"
    

<GridLayoutExample@GridLayout>:
    # For GridLayout we must specifiy the following: 
    # # of rows or # of columns
    #cols: 3
    rows: 2

    Button:
        text: "A"
        size_hint: None, 1 # width will take up 50 percent, height will take up 100 percent
        width: "60dp" # setting the width from here sets a fixed width
    BoxLayoutExample:
    Button:
        text: "C"
    Button:
        text: "D"
        size_hint: None, 1
        width: "60dp"
    Button:
        text: "E"
    Button:
        text: "F"


<AnchorLayoutExample>:
    # The properties that anchor_x can get are the following:
    # "right", "left", "center"
    anchor_x: "center"
    # The properties that anchor_y can get are the following:
    # "bottom", "top", "center"
    anchor_y: "top"
    BoxLayout:
        size_hint: .2,.2
        Button: 
            text: "A"    
        Button: 
            text: "B"
            
# Box Layout fits everything in one line and can be defined as either going horizontal or vertical
<BoxLayoutExample>:
    orientation: "horizontal"
    Button:
        text: "A"
        # In order to change a button's size within a box layout we must use size_hint instead of 
        # size as used in a widget
        size_hint: .5, None # width, height
        #size: "100dp", "60dp"
        #width: "100dp"
        #height: "60dp"
        # x, center_x, right -> use only one of these options when using pos_hint 
        # y, center_y, top -> for both x and y values range from 0 to 1
        pos_hint : {"center_y":.5}
    BoxLayout:
        orientation: "vertical"
        spacing: "10dp"
        Button:
            text: "B1"
        Button:
            text: "B2"
        Button:
            text: "B3"
        Button:
            text: "B4"

    Label:
        text: "C"


<MainWidget>:
    Button:
        text: "Hello"
        size: "100dp","80dp"
        pos: "100dp","200dp"
        color: 0, 0, 1, 1
    Label:
        text: "Hello2"
        size: "100dp","80dp"
        pos: "200dp","300dp"
        color: 1, 0, 0, 1
CanvasExample7:

# creating a variable
#: set s dp(150)

<CanvasExample7>:
    RelativeLayout:
        canvas:
            Color:
                rgb: 0,0,1
            Rectangle:
                size: self.size
    RelativeLayout:
        canvas:
            Color:
                rgb: 1,1,1
            Rectangle:
                size: self.size
    RelativeLayout:
        canvas:
            Color:
                rgb: 1,0,0
            Rectangle:
                size: self.size
    
                
    
            

<CanvasExample6>:
    # RelativeLayout:
        # adding .before to canvas allows the canvas to be placed first "before" the button gets placed
        # Then the button gets drawn on top of the canvas
        # canvas.before:
            #Rectangle:
        # canvas: 
        #     Rectangle:
        # text: "A"
        # pos: 100,100

    BoxLayout:
        # adding the size attribute is needed if we want BoxLayout to take full width and height
        # of the screen
        # This is only needed because in this example the CanvasExample6 is inheriting from WidgetsExample

        size: root.size
        Widget:
            canvas:
                Color: 
                    rgb: 0,1,0
                Rectangle:
                    size: self.size
        # Widget:
        #    canvas:
        #        Color: 
        #            rgb: 0.3,0,0.5
        #        Rectangle:
        #            size: self.size
                    # A canvas will always start at coordintate point (0,0) so because I have a 
                    # widget above drawing a rectangle, the rectangle will be to the left side
                    # when this second widget is added, what happens is that it is drawn right above the first widget
                    # again because canvas is drawn at postion (0,0), in order to display this second Rectangle right next 
                    # to the first one we need to set it's position attribute to the positon of the Widget -> self.pos
        #            pos: self.pos

        # Instead of using a Widget where we would have to specify the pos, alternetively we can use RelativeLayout
        RelativeLayout:
            canvas:
                Color:
                    rgb: 0.3,0,0.5
                Rectangle:
                    size: self.size
            

<CanvasExample4>:
    Button:
        pos: 100,400
        text: "A"
        on_press: root.on_button_a_click()

<CanvasExample3>:
    canvas:
        # Adding color attribute before widgets/shapes will set each of the following widgets to the specified color
        Color: 
            # option to add attribute of rgb or rgba
            # rgb: 1,0,0 
            rgba: 1,0,0,.3

        Line: 
            circle: (200,200,100) # center_x, center_y, radius
            width: 2
        Line:
            ellipse: (500,300, 100, 200) # center_x, center_y, radius_x, radius_y
            width: 4
        Color:
            rgba: 0,0,1,1
        Line:
            rectangle: (800,100,300,200) # x,y,w,h
            width: 2

<CanvasExample2>:
    canvas:
        # Horizontal line
        Line:
            points: (0,self.height/2,self.width,self.height/2)
            width: 2
        # Vertical line
        Line:
            points: (self.width/2,self.height,self.width/2,0)
            width: 2

<CanvasExample1>:
    canvas:
        Rectangle:
            pos: self.center_x-s/2, self.center_y-s/2
            size: s,s
        Ellipse:
            pos: 200, 500
            size: s, s/2
        Line:
            # points takes two coordinate points -> (x1,y1,x2,y2)
            # creates a triangle spring that adapts to the screen
            points: (0,0,self.width/4,100,self.width/2,0,self.width*3/4,100,self.width,0)
            width: 3

<ImagesExample@GridLayout>:
    cols: 3
    Image:
        source: "images/cake.jpg"
    Image:
        source: "images/cake.jpg"
        allow_stretch: True
    Image:
        source: "images/cake.jpg"
        keep_ratio: False
        allow_stretch: True

<WidgetsExample@GridLayout>:
    cols: 3
    ToggleButton:
        text: "OFF"
        # To control the state of the button we can point it to a function
        on_state: root.on_toggle_button_state(self)
        size_hint: None, 1
        width: "100dp"
    Button:
        text: "Count"
        on_press: root.on_button_click()
        disabled: not root.count_enabled
    Label:
        text: root.my_text
        # For the font we download a font which is stored in the fonts directory within this project folder
        # Then for the attribute of font_name we set the path of where that font is located
        font_name: "fonts/Lcd.ttf"
        font_size: "80dp"
        # Red,Green,Blue,Alpha
        color: 1, .5, 1, 1
    Switch:
        id: switch
        on_active: root.on_switch_active(self)
        size_hint: None, 1
        width: "100dp"
        active: True
    Slider:
        # for id attribute any name can be given
        id: slider
        min: 0
        max: 100
        step: 1
        value: 50
        orientation: "horizontal"
        disabled: not switch.active
        # allows the value of the slider to be sent to the function specified below
        on_value: root.on_slider_value(self)
    BoxLayout:
        orientation: "vertical"
        Label:
            # default data type value of the slider's value is float type
            # to change it to int we first convert the slider value to int
            # and then to string in order to display it on the Label
            text: str(int(slider.value))
        ProgressBar:
            # minimum value for a progress bar is always zero and this can't be customized
            # max value on the other hand can be customized
            max: 100
            # This will be the start of the progress bar
            value: slider.value

    TextInput:
        id: text_input
        size_hint: None, 1
        width: "100dp"
        text: "Kivy Tutorial"
        multiline: False
        on_text_validate: root.on_text_validate(self)
    Label:
        text: "Your name is: " + root.text_input_str



<PageLayoutExample@PageLayout>:
    MainWidget:
    BoxLayoutExample:
    AnchorLayoutExample:
    GridLayoutExample:


<ScrollViewExample@ScrollView>:
    StackLayoutExample:
        size_hint: 1,None
        # this value of self.minimum_height gets computed automatically from StackLayoutExample
        height: self.minimum_height 


# stack layout will stack items on multiple lines
# each item must get a size
<StackLayoutExample>:
    # options: left-right top-bottom , default: "lr-tb"
    # orientation: "rl-bt"
    # padding values are in a clockwise rotation starting from the left
    # left, top, right, bottom
    # padding: ("20dp","20dp","20dp","300dp") 
    # spacing is given horizontaly and vertically -> <horizontal_value>, <vertical_value>
    # spacing: "20dp", "20dp"
    

<GridLayoutExample@GridLayout>:
    # For GridLayout we must specifiy the following: 
    # # of rows or # of columns
    #cols: 3
    rows: 2

    Button:
        text: "A"
        size_hint: None, 1 # width will take up 50 percent, height will take up 100 percent
        width: "60dp" # setting the width from here sets a fixed width
    BoxLayoutExample:
    Button:
        text: "C"
    Button:
        text: "D"
        size_hint: None, 1
        width: "60dp"
    Button:
        text: "E"
    Button:
        text: "F"


<AnchorLayoutExample>:
    # The properties that anchor_x can get are the following:
    # "right", "left", "center"
    anchor_x: "center"
    # The properties that anchor_y can get are the following:
    # "bottom", "top", "center"
    anchor_y: "top"
    BoxLayout:
        size_hint: .2,.2
        Button: 
            text: "A"    
        Button: 
            text: "B"
            
# Box Layout fits everything in one line and can be defined as either going horizontal or vertical
<BoxLayoutExample>:
    orientation: "horizontal"
    Button:
        text: "A"
        # In order to change a button's size within a box layout we must use size_hint instead of 
        # size as used in a widget
        size_hint: .5, None # width, height
        #size: "100dp", "60dp"
        #width: "100dp"
        #height: "60dp"
        # x, center_x, right -> use only one of these options when using pos_hint 
        # y, center_y, top -> for both x and y values range from 0 to 1
        pos_hint : {"center_y":.5}
    BoxLayout:
        orientation: "vertical"
        spacing: "10dp"
        Button:
            text: "B1"
        Button:
            text: "B2"
        Button:
            text: "B3"
        Button:
            text: "B4"

    Label:
        text: "C"


<MainWidget>:
    Button:
        text: "Hello"
        size: "100dp","80dp"
        pos: "100dp","200dp"
        color: 0, 0, 1, 1
    Label:
        text: "Hello2"
        size: "100dp","80dp"
        pos: "200dp","300dp"
        color: 1, 0, 0, 1